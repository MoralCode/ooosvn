<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module1" script:language="StarBasic">Sub ImportSVN()
  
  dim document   as object
dim dispatcher as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent

LoadTools

sDocURL = FileName(oDoc)
        if sDocURL = &quot;&quot; then
                ImportSVN = 0
            exit sub
        end if

&apos; Test for wrong file type
if validatefiletype(sDocURL)=&quot;false&quot; then
	exit sub
end if

&apos; Test to see if file of same name is already under change control
If FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
MsgBox( &quot;A file named &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is already under version control.  Please save as a different file name before reattempting.&quot;, 16, &quot;File not imported&quot;)
Exit Sub
End If
         
            cQuote = Chr( 34 )

   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/import.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir + cQuote , &quot;&quot;,6,true)
  dispatcher.executeDispatch(document, &quot;.uno:Reload&quot;, &quot;&quot;, 0, Array())
  
end sub
  
Sub CommitSVN()

  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent

 LoadTools
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;

  End If
  
	&apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Please import the file to change control to be able to commit changes.&quot;, 16, &quot;Commit error&quot;)
		Exit Sub
	End If
	
	Comment = &quot;Manual-commit&quot;

cQuote = Chr( 34 )
	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/commit.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; Comment + cQuote)
	
end sub

Sub oldRevertSVN()

dim document   as object
dim dispatcher as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

  Dim oDoc
  Dim sDocURL
  Dim repo
  oDoc = ThisComponent

LoadTools

  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;

  End If
  
  &apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable version management.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If
  
  version = InputBox (&quot;Enter version of this document to recover:&quot;, 1, &quot;Revert&quot;)
  exit sub

cQuote = Chr( 34 )
	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/revert.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; version + cQuote, &quot;&quot;,6,true)
	
	dispatcher.executeDispatch(document, &quot;.uno:Reload&quot;, &quot;&quot;, 0, Array())
	
end sub

sub InfoSVN()

  Dim oDoc
  Dim sDocURL
  Dim repo
  oDoc = ThisComponent
&apos;  If (Not GlobalScope.BasicLibraries.isLibraryLoaded(&quot;Tools&quot;)) Then
&apos;    GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)
&apos;  End If
LoadTools
  If (oDoc.hasLocation()) Then
	sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
End If

  &apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable statistics.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If

cQuote = Chr( 34 )

	Shell( &quot;bash -c &quot; + cQuote + &quot;cd &quot; &amp; WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/ &amp;&amp; svn info &gt; &quot; &amp; WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/info.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/info.txt&quot;
Open aFile For Input As iNumber
While not eof(iNumber)
Line Input #iNumber, sLine
If sLine &lt;&gt;&quot;&quot; then
sMsg = sMsg &amp; sLine &amp; chr(13)
end if
wend
Close #iNumber
Msgbox (sMsg, 64, &quot;SVN info for &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;))

end sub

Sub ThumbnailsSVN()

dim document   as object
dim dispatcher as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent

  LoadTools
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
  End If
  
    &apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable version management.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If
         
            cQuote = Chr( 34 )

   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/thumbnails.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir + cQuote)

	do
	wait 100
	Loop until FileExists(ConvertToURL(WorkingDir) &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/preview/log.txt&quot;)   
   
   &apos; The dialogue  
   Dim sFileURL as String

&apos; Set the Dialog Arguments to a Template for FILESAVE
   sFilePickerArgs = Array( com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_LINK_PREVIEW_IMAGE_TEMPLATE) &apos;FILESAVE_AUTOEXTENSION )

&apos; register the Service for Filepicker   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )

&apos; Pass some arguments to it
   With oFilePicker
           .Initialize( sFilePickerArgs() )
           .setDisplayDirectory( converttoURL(WorkingDir) &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/preview/&quot; )
           .setTitle( &quot;Select version to revert to &quot; )
           .appendFilter(&quot;Document Thumbnails&quot;, &quot;*.png&quot; ) 
           
   End With

&apos; If the savepath is selected return the complete path and display it in an messagebox   
   If oFilePicker.execute() Then
      sFiles = oFilePicker.getFiles()
      sFileURL = sFiles(0)
      version = FileNameoutofPath(sFileURL, &quot;/&quot;)
      sCut = Right ( version, 5 )
      version = Left ( version, InStr( 1, version, sCut ) )
      else
	exit sub

  End If

&apos; Close the Dialog
   oFilePicker.Dispose()

	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/revert.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; version + cQuote, &quot;&quot;,6,true)
	
	&apos; Reload
	dispatcher.executeDispatch(document, &quot;.uno:Reload&quot;, &quot;&quot;, 0, Array())
   
End sub

sub OldLogSVN()

  Dim oDoc
  Dim sDocURL
  Dim repo
  oDoc = ThisComponent

LoadTools
  If (oDoc.hasLocation()) Then
	sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
End If

&apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable version management.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If

cQuote = Chr( 34 )

	Shell( &quot;bash -c &quot; + cQuote + &quot;cd &quot; &amp; WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/ &amp;&amp; svn log -v &gt; &quot; &amp; WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/log.txt&quot; + cQuote, &quot;&quot;,6,true)
	
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/log.txt&quot;
Open aFile For Input As iNumber
While not eof(iNumber)
Line Input #iNumber, sLine
If sLine &lt;&gt;&quot;&quot; then
sMsg = sMsg &amp; sLine &amp; chr(13)
end if
wend
Close #iNumber
Msgbox (sMsg, 64, &quot;SVN log for &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;))

end sub

Sub RevertSVN()

rem ----------------------------------------------------------------------
rem define variables
dim document   as object
dim dispatcher as object
rem ----------------------------------------------------------------------
rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent

  LoadTools
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
  End If
  
    &apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable version management.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If
         
            cQuote = Chr( 34 )

   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/listversions.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir + cQuote, &quot;&quot;,6,true)

   &apos; The dialogue
   
   Dim sFileURL as String

&apos; Set the Dialog Arguments to a Template for FILESAVE

   sFilePickerArgs = Array( com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_SIMPLE)

&apos; register the Service for Filepicker
   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )

&apos; Pass some arguments to it

   With oFilePicker
           .Initialize( sFilePickerArgs() )
           .setDisplayDirectory( converttoURL(WorkingDir) &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/versions/&quot; )
           .setTitle( &quot;Select version of &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; to revert to &quot; )
           .appendFilter(&quot;Document versions&quot;, &quot;*.version&quot; ) 
           
   End With

&apos; If the savepath is selected return the complete path and display it in an messagebox   

   If oFilePicker.execute() Then
      sFiles = oFilePicker.getFiles()
      sFileURL = sFiles(0)
      version = FileNameoutofPath(sFileURL, &quot;/&quot;)
      sCut = Right ( version, 9 )
      version = Left ( version, InStr( 1, version, sCut ) )
      else
	exit sub
&apos;      MsgBox ( version )

  End If

&apos; Close the Dialog
   oFilePicker.Dispose() 

	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/revert.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; version + cQuote, &quot;&quot;,6,true)
	
	&apos; Reload
	dispatcher.executeDispatch(document, &quot;.uno:Reload&quot;, &quot;&quot;, 0, Array())
   
End sub

Sub RecoverSVN()

  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent
  LoadTools

    repo = getRepo
    WorkingDir = getWorkingDir  
         
            cQuote = Chr( 34 )
	&apos; Get document list
   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/listdocuments.sh &quot; &amp; WorkingDir + cQuote, &quot;&quot;,6,true)

   &apos; The Document list dialogue
   
   Dim sFileURL as String

&apos; Set the Dialog Arguments to a Template for FILESAVE

   sFilePickerArgs = Array( com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_SIMPLE)

&apos; register the Service for Filepicker
   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )

&apos; Pass some arguments to it

   With oFilePicker
           .Initialize( sFilePickerArgs() )
           .setDisplayDirectory( converttoURL(WorkingDir) &amp; &quot;/documentlist/&quot;)
           .setTitle( &quot;Step 1/3: Select Document to recover&quot; )
           .appendFilter(&quot;All files&quot;, &quot;*.*&quot; ) 
           
   End With

&apos; If the savepath is selected return the complete path and display it in an messagebox   

   If oFilePicker.execute() Then
      sFiles = oFilePicker.getFiles()
      sFileURL = sFiles(0)
      documentname = FileNameoutofPath(sFileURL, &quot;/&quot;)
      else
	exit sub

  End If

&apos; Close the Dialog
   oFilePicker.Dispose()

	&apos; Get version list
   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/listversions.sh &quot; &amp; documentname &amp; &quot; &quot; &amp; documentname &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir + cQuote, &quot;&quot;,6,true)

   &apos; The version dialogue

&apos; Set the Dialog Arguments to a Template for FILEOPEN

   sFilePickerArgs = Array( com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_SIMPLE)

&apos; register the Service for Filepicker
   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )

&apos; Pass some arguments to it

   With oFilePicker
           .Initialize( sFilePickerArgs() )
           .setDisplayDirectory( converttoURL(WorkingDir) &amp; &quot;/&quot; &amp; documentname &amp; &quot;/versions/&quot; )
           .setTitle( &quot;Step 2/3: Select version of &quot; &amp; documentname &amp; &quot; to revert to &quot; )
           .appendFilter(&quot;Document versions&quot;, &quot;*.version&quot; ) 
           
   End With

&apos; If the savepath is selected return the complete path and display it in an messagebox   

   If oFilePicker.execute() Then
      sFiles = oFilePicker.getFiles()
      sFileURL = sFiles(0)
      version = FileNameoutofPath(sFileURL, &quot;/&quot;)
      sCut = Right ( version, 9 )
      version = Left ( version, InStr( 1, version, sCut ) )
      else
	exit sub
  End If

&apos; Close the Dialog
   oFilePicker.Dispose()
   
   &apos;Select output directory
   
      sFilePickerArgs = Array( com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_SIMPLE)

&apos; register the Service for Filepicker
   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FolderPicker&quot; )

&apos; Pass some arguments to it

   With oFilePicker
           .Initialize( sFilePickerArgs() )
           .setTitle( &quot;Step 3/3: Select directory to save version &quot; &amp; version &amp; &quot; of &quot; &amp; documentname &amp; &quot; in&quot; )
           
   End With

&apos; If the savepath is selected return the complete path and display it in an messagebox   

   If oFilePicker.execute() Then
      sFiles = oFilePicker.getDirectory()
      outputURL = mid(sFiles, 8) &amp; documentname
      else
	exit sub

  End If

&apos; Close the Dialog
   oFilePicker.Dispose()
   
   &apos;Output
	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/revert.sh &quot; &amp; outputURL &amp; &quot; &quot; &amp; documentname &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; version + cQuote, &quot;&quot;,6,true)

	outputfile = ConvertToURL(outputURL)

&apos; Load the recovered file

oNewCalc = StarDesktop.loadComponentfromURL(outputfile,&quot;_blank&quot;, 0, Array())
   
End sub


Function validatefiletype(sDocURL As String)

oSFA       = createUNOService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
oInpStream = oSFA.openFileRead(sDocURL)

Dim aProps(0) as new  com.sun.star.beans.PropertyValue
aProps(0).Name = &quot;InputStream&quot;
aProps(0).Value = oInpStream

oTD = createUnoService(&quot;com.sun.star.document.TypeDetection&quot;)

bDeepDetection: true
sType = oTD.queryTypeByDescriptor(aProps(), true)

oInpStream.closeInput()

if sType &lt;&gt; &quot;writer8&quot; then
if sType &lt;&gt; &quot;writer8_template&quot; then
if sType &lt;&gt; &quot;writer_StarOffice_XML_Writer&quot; then
if sType &lt;&gt; &quot;writerglobal8&quot; then
if sType &lt;&gt; &quot;calc8&quot; then
if sType &lt;&gt; &quot;calc8_template&quot; then
if sType &lt;&gt; &quot;calc_StarOffice_XML_Calc&quot; then
if sType &lt;&gt; &quot;impress8&quot; then
if sType &lt;&gt; &quot;impress8_template&quot; then
if sType &lt;&gt; &quot;impress_StarOffice_XML_Impress&quot; then
if sType &lt;&gt; &quot;draw8&quot; then
if sType &lt;&gt; &quot;draw8_template&quot; then
if sType &lt;&gt; &quot;draw_StarOffice_XML_Draw&quot; then
if sType &lt;&gt; &quot;math8&quot; then
if sType &lt;&gt; &quot;math_StarOffice_XML_Math&quot; then
if sType &lt;&gt; &quot;StarBase&quot; then
msgbox (sDocURL &amp; &quot; is of file type &quot; &amp; sType &amp; &quot; and is not supported by OOoSVN.  Save in OpenDocument format if you wish to put your work under change control.&quot;, 16, &quot;Unsupported file type&quot;)
validatefiletype=&quot;false&quot;
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if
end if

end function 

sub DiffSVN() 

dim document   as object
dim dispatcher as object

rem get access to the document
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent
  LoadTools
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
  End If
  
    &apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable version management.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If
         
            cQuote = Chr( 34 )

   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/listversions.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir + cQuote, &quot;&quot;,6,true)

   &apos; The dialogue
   
   Dim sFileURL as String

&apos; Set the Dialog Arguments to a Template for FILEOPEN

   sFilePickerArgs = Array( com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_SIMPLE)

&apos; register the Service for Filepicker
   
   oFilePicker = CreateUnoService( &quot;com.sun.star.ui.dialogs.FilePicker&quot; )

&apos; Pass some arguments to it

   With oFilePicker
           .Initialize( sFilePickerArgs() )
           .setDisplayDirectory( converttoURL(WorkingDir) &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/versions/&quot; )
           .setTitle( &quot;Select version of &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; to compare with active version &quot; )
           .appendFilter(&quot;Document versions&quot;, &quot;*.version&quot; ) 
           
   End With

&apos; If the savepath is selected return the complete path and display it in an messagebox   

   If oFilePicker.execute() Then
      sFiles = oFilePicker.getFiles()
      sFileURL = sFiles(0)
      version = FileNameoutofPath(sFileURL, &quot;/&quot;)
      sCut = Right ( version, 9 )
      version = Left ( version, InStr( 1, version, sCut ) )
      OutputURL = WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/tempdiff.zip&quot;
      else
	exit sub

  End If

&apos; Close the Dialog
   oFilePicker.Dispose() 
	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/revert.sh &quot; &amp; OutputURL &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; version + cQuote, &quot;&quot;,6,true)

&apos;	Compare documents
	dim xFrame   as object
	dim xDispatchHelper as object

	xFrame   = ThisComponent.CurrentController.Frame
	xDispatchHelper = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

	dim args(0) as new com.sun.star.beans.PropertyValue
	args(0).Name = &quot;URL&quot;
	args(0).Value = ConvertToURL(OutputURL)
	xDispatchHelper.executeDispatch(xFrame, &quot;.uno:CompareDocuments&quot;, &quot;&quot;, 0, args())
   
end sub

Sub OnSavedSVN()
  
  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent
  LoadTools
  
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir  

    Else
    &apos; If file has not been saved, it can&apos;t be imported.
    MsgBox(&quot;File not successfully saved so can not be committed to version control.&quot;, 16, &quot;Error&quot;)
    Exit Sub
  End If

&apos; Test to see if file of same name is already under change control
If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
	Exit Sub
End If

	Comment = &quot;Incremental-save&quot;
    
    &apos; Commit any changes     
    cQuote = Chr( 34 )
	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/commit.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; Comment + cQuote)
  
end sub

Sub OnSavedAsSVN()

dim document   as object
dim dispatcher as object

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
  
  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent
 LoadTools
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    
    &apos; Test for repo existence.
If NOT FileExists(repo &amp; &quot;/README.txt&quot;) then
msgbox (&quot;Repository not found. Create it using:&quot; &amp; chr(13) &amp; &quot;svnadmin create --fs-type fsfs &quot; &amp; repo, 16, &quot;Repository error&quot;)
exit sub
end if

    Else
    &apos; If file has not been saved, it can&apos;t be imported.
    MsgBox(&quot;File has not been successfully saved so can not be placed under version control.&quot;, 16, &quot;Error&quot;)
    Exit Sub
  End If

&apos; Test for wrong file type
if validatefiletype(sDocURL)=&quot;false&quot; then
	exit sub
end if

&apos; Test to see if file of same name is already under change control
If FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
MsgBox( &quot;A file named &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is already under version control.  Please save as a different file name before attempting import.&quot;, 16, &quot;Error&quot;)
Exit Sub
End If
         
            cQuote = Chr( 34 )

   Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/import.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir + cQuote, &quot;&quot;,6,true)
     dispatcher.executeDispatch(document, &quot;.uno:Reload&quot;, &quot;&quot;, 0, Array())
  
end sub

Sub OnLaunch()

&apos;msgbox(&quot;test&quot;)

end sub

Sub OnPrintSVN()
  
  &apos; Save the document first
document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
dispatcher.executeDispatch(document, &quot;.uno:Save&quot;, &quot;&quot;, 0, Array())
  
  Dim oDoc
  Dim sDocURL
  oDoc = ThisComponent
  LoadTools
  If (oDoc.hasLocation()) Then
    sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir  

    Else
    &apos; If file has not been saved, it can&apos;t be imported.
    MsgBox(&quot;File not successfully saved so can not be committed to version control.&quot;, 16, &quot;Error&quot;)
    Exit Sub
  End If

&apos; Test to see if file of same name is already under change control
If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
	Exit Sub
End If

    comment = &quot;Printed&quot;
    
    cQuote = Chr( 34 )
	Shell( &quot;bash -c &quot; + cQuote + &quot;sh &quot; &amp; WorkingDir &amp; &quot;/commit.sh &quot; &amp; sDocURL2 &amp; &quot; &quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; &quot; &amp; repo &amp; &quot; &quot; &amp; WorkingDir &amp; &quot; &quot; &amp; Comment + cQuote, &quot;&quot;,6,true)
  
end sub

Sub LogSVN()

Dim oDlgLog As Object
Dim txtLog As Object
Dim sMsg As String

	Dim oDoc
  Dim sDocURL
  Dim repo
  oDoc = ThisComponent
  LoadTools
    If (Not GlobalScope.DialogLibraries.isLibraryLoaded(&quot;ooosvn&quot;)) Then
    GlobalScope.DialogLibraries.LoadLibrary(&quot;ooosvn&quot;)
  End If
  If (oDoc.hasLocation()) Then
	sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
End If

	oDlgLog = _
		CreateUnoDialog(DialogLibraries.ooosvn.DlgLog)
	
	With oDlgLog
		txtLog = .getControl(&quot;txtAbout&quot;)
	End With
	
&apos; Test to see if file of same name is already under change control
	If NOT FileExists(WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/&quot;) Then
		MsgBox( FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot; is not under version control.  Import the file to change control to enable version management.&quot;, 16, &quot;Error&quot;)
		Exit Sub
	End If

cQuote = Chr( 34 )

	Shell( &quot;bash -c &quot; + cQuote + &quot;cd &quot; &amp; WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/ &amp;&amp; svn log -v &gt; log.txt&quot; + cQuote, &quot;&quot;,6,true)
	
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/&quot; &amp; FileNameoutofPath(sDocURL, &quot;/&quot;) &amp; &quot;/log.txt&quot;
Open aFile For Input As iNumber
While not eof(iNumber)
Line Input #iNumber, sLine
If sLine &lt;&gt;&quot;&quot; then
sMsg = sMsg &amp; sLine &amp; chr(13)
end if
wend
Close #iNumber

	txtLog.Text = sMsg
	oDlgLog.Title = &quot;Log for &quot; &amp;  FileNameoutofPath(sDocURL, &quot;/&quot;)
	oDlgLog.execute
		
End Sub

Sub reportfiletypetest()

Dim oDoc
 Dim sDocURL
  Dim repo
  oDoc = ThisComponent

  LoadTools
  If (oDoc.hasLocation()) Then
	sDocURL = oDoc.getURL()
    sDocURL2 = mid(sDocURL, 8)
    repo = getRepo
    WorkingDir = getWorkingDir
    else sDocURL = &quot;[no name]&quot;
End If

oSFA       = createUNOService (&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
oInpStream = oSFA.openFileRead(sDocURL)

Dim aProps(0) as new  com.sun.star.beans.PropertyValue
aProps(0).Name = &quot;InputStream&quot;
aProps(0).Value = oInpStream

oTD = createUnoService(&quot;com.sun.star.document.TypeDetection&quot;)

bDeepDetection: true
sType = oTD.queryTypeByDescriptor(aProps(), true)

oInpStream.closeInput()

msgbox (sType)

end sub

Function getRepo()
	aService = CreateUnoService(&quot;com.sun.star.util.PathSubstitution&quot;)
	sUserPath = aService.substituteVariables(&quot;$(home)&quot;, true)
	getRepo = sUserPath &amp; &quot;/.ooosvn&quot;
end Function

Function getWorkingDir()
	aService = CreateUnoService(&quot;com.sun.star.util.PathSubstitution&quot;)
	sUserPath = aService.substituteVariables(&quot;$(home)&quot;, true)
	getWorkingDir = mid(sUserPath &amp; &quot;/.ooosvn&quot;, 8)
end Function

Sub HelpAbout()

Dim oDlgLog As Object
Dim txtLog As Object
Dim sMsg As String

	oDlgLog = _
		CreateUnoDialog(DialogLibraries.ooosvn.DlgLog)
	
	With oDlgLog
		txtLog = .getControl(&quot;txtAbout&quot;)
	End With

	txtLog.Text = &quot;Visit OOoSVN on Sourceforge.net:&quot; &amp; chr(13) &amp; &quot;http://sourceforge.net/projects/ooosvn/&quot; &amp; chr(13) &amp; chr(13) &amp;_
						&quot;Please submit bug reports and feature requests to the issue tracker there.&quot; &amp; chr(13) &amp; chr(13) &amp;_
						&quot;This software is still beta.&quot;
	oDlgLog.Title = &quot;About OOoSVN&quot;
	oDlgLog.execute
		
End Sub

REM ========================================================
function CreateSVN() as integer
        CreateSVN = true

        &apos;&apos; need to make sure we have SVN, and get path to svn and svnadmin executables
        sSVNURL = PickFolder(sGetHomeURL(), &quot;Select a directory for the new repository&quot;)
        ret = Shell(&quot;svnadmin create --fs-type fsfs &quot; &amp; sSVNURL, &quot;&quot;,6,true)
        if ret &lt;&gt; 0 then
                CreateSVN = false
               msgbox(&quot;Failed&quot;)
                exit function
        end if
       
 &apos;       if ConnectToSVN(sSVNDir) = true then
  &apos;              bConnected = true
   &apos;     else
    &apos;            CreateSVN = false
     &apos;           MsgBox(&quot;Repository created, but could not be opened.&quot;)
      &apos;          exit function
      &apos;  end if
end function

REM ========================================================
&apos; PSEUDO CODE!
&apos;Function ConnectToSVN(sSVNDir) as integer
 &apos;       ConnectToSVN = true
       
  &apos;      aDocList = aFileList(sSVNDir)
   &apos;     if aDocList(0) = &quot;&quot; then
    &apos;            ConnectToSVN = false
     &apos;           bConnected = false
      &apos;          MsgBox(&quot;Failed to connect to the SVN&quot;)
       &apos;         exit function
       &apos; end if
       &apos; bConnected = true
&apos;end function

REM ========================================================
Function PickFolder( cFolder, title )
   oFolderPickerDlg = createUnoService( &quot;com.sun.star.ui.dialogs.FolderPicker&quot; )
   If Len( cFolder ) &gt; 0 Then
      oFolderPickerDlg.setDisplayDirectory( ConvertToURL( cFolder ) )
   EndIf
   oFolderPickerDlg.title = title
   oFolderPickerDlg.execute()
   cPickedFolder = oFolderPickerDlg.getDirectory()
   PickFolder = ConvertFromURL( cPickedFolder )
End Function

Sub LoadTools
  If (Not GlobalScope.BasicLibraries.isLibraryLoaded(&quot;Tools&quot;)) Then
    GlobalScope.BasicLibraries.LoadLibrary(&quot;Tools&quot;)
  End If
end sub

REM ========================================================
Function FileName(oDoc as Object) as string
        If (oDoc.hasLocation()) Then
          sDocURL = oDoc.getURL()
          repo = getRepo
          WorkingDir = getWorkingDir
          
          &apos; Test for repo existence.
          If NOT FileExists(repo &amp; &quot;/README.txt&quot;) then
                msgbox (&quot;Repository not found. Create it using:&quot; &amp; chr(13) &amp; &quot;svnadmin create --fs-type fsfs &quot; &amp; mid(repo, 8) &amp; chr(13) &amp; &quot;Then all scripts should be placed in &quot; &amp; WorkingDir, 16, &quot;Repository Error&quot;)
                FileName = &quot;&quot;
            exit function
          end if
        Else
                &apos; If file has not been saved, it can&apos;t be imported.
            MsgBox(&quot;File has not been saved so can not be placed under version control.  Save the file to disk before reattempting.&quot;, 16, &quot;File not imported&quot;)
                FileName = &quot;&quot;
                exit function
        End If
        FileName = sDocURL
end function
</script:module>