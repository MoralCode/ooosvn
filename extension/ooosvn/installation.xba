<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="installation" script:language="StarBasic">Function CreateWorkingDir
&apos;Creates ~/.ooosvn/ and home repository

   WorkingDir = getWorkingDir

&apos; Create the home repository
   ret = Shell(&quot;svnadmin create --fs-type fsfs&quot; , 6, WorkingDir &amp; &quot; &gt; &quot; &amp; WorkingDir &amp; &quot;/operation.log&quot;,true)
If ret &lt;&gt; 0 then 
		CreateSVN = false
		&apos;Error Log window
		&apos;OperationLog(&quot;Failed to create repository&quot;)
		
		MsgBox(&quot;Failed to create repository.&quot;,48,&quot;Error&quot;)
		end if

   If NOT FileExists(WorkingDir) Then
   
LastOperationLog
   
     &apos;MsgBox(&quot;Creation of working directory &quot; &amp; WorkingDir &amp; &quot; failed.  Do you have adequate write permissions?&quot;, 16, &quot;Failed&quot;)
     WorkingDirCreate = 0
     Exit Function
   End If

   Installscripts

&apos;end if

end Function

Function InstallScripts
&apos; Installs/upgrades scripts.  It is strongly recommended that after any upgrade, this macro is run.
  WorkingDir = getWorkingDir

          If NOT FileExists(WorkingDir) then
               CreateWorkingDir
            exit function
          end if
          
  &apos; Get the OOoSVN installation directory
    oPIP = GetDefaultContext().getByName( _ 
    &quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;) 
  ExtensionURL=oPIP.getPackageLocation(&quot;vnd.basicaddonbuilder.ooosvn&quot;)

sFile = ( Dir (ExtensionURL &amp; &quot;/bashscripts/*.sh&quot;))
   While (sFile &lt;&gt; &quot;&quot;) 
         FileCopy ExtensionURL &amp; &quot;/bashscripts/&quot; &amp; sFile, ConvertToURL(WorkingDir &amp; &quot;/&quot; &amp; sFile) 
         sFile = Dir 
   Wend 

&apos; test to make sure script creation worked
If Not FileExists(WorkingDir &amp; &quot;/commit.sh&quot;) then

MsgBox(&quot;Failed to create scripts in &quot; &amp; WorkingDir,48,&quot;Error&quot;)

End If

end Function

function CreateSVN() as integer
	CreateSVN = True
	
	&apos; If no working directory, it needs to be created for a repository to exist.
	WorkingDir = getWorkingDir	
	If NOT FileExists(WorkingDir) Then
       InstallScripts
     Exit Function
   End If
	
	&apos;&apos; need to make sure we have SVN, and get path to svn and svnadmin executables
	ret = Shell(&quot;svn --help&quot;, 6,&quot;&quot;,true)
	if ret &lt;&gt; 0 then
		CreateSVN = false
		MsgBox(&quot;Could not find svn. Please install Subversion first.&quot; &amp; chr$(13) &amp; &quot;See http://subversion.tigris.org&quot;,48,&quot;Error&quot;)
		exit function
	end if
		
 	sSVNURL = PickFolder(sGetHomeURL(), &quot;Select a directory for the new repository&quot;, &quot;&quot;)
	ret = Shell(&quot;svnadmin create --fs-type fsfs&quot;, 6, sSVNURL,true)
	if ret &lt;&gt; 0 then
		CreateSVN = false
		MsgBox(&quot;Failed to create repository.&quot;,48,&quot;Error&quot;)
		exit function
	end if
	
&apos;	ConnectToSVN(sSVNURL)

If NOT FileExists(sSVNURL &amp; &quot;/README.txt&quot;) then
msgbox (&quot;Repository creation failed.&quot; &amp; repo, 16, &quot;Error&quot;)
exit function
end if

uuid = shell(&quot;svn info &apos;&quot; &amp; converttourl(sSVNURL) &amp; &quot;&apos; | grep UUID | cut -c18-&quot;)
msgbox(sSVNURL)
msgbox(uuid)

end function

Function FirstRunCheck
&apos; Function to test if it is the first run or not.  If it is, the wizard runs.

	WorkingDir = getWorkingDir	

&apos; Set the variable to 1
FirstRunCheck = 1
	
&apos; If we can&apos;t find a shell script in the working dir then OOoSVN is not set up so run the installation
If NOT FileExists(WorkingDir &amp; &quot;/commit.sh&quot;) then
               RunInstallWizard=MsgBox(&quot;This appears to be the first time you have run OOoSVN.&quot; &amp; chr(10) &amp; chr(10) &amp; _
               &quot;There are several configuration steps we must do:&quot; &amp; chr(10) &amp; _
               &quot;1. Check you have the required packages.&quot; &amp; chr(10) &amp; _
               &quot;2. Create a working directory, &quot; &amp; WorkingDir &amp; &quot;, which will be used for file operations.&quot; &amp; chr(10) &amp; _
               &quot;3. Configure a repository for documents to be checked into.&quot; &amp; chr(10) &amp; chr(10) &amp; _
               &quot;Press OK to begin.&quot;,65, &quot;First run wizard&quot;)

               If RunInstallWizard &lt;&gt; &quot;1&quot; Then
               		&apos; If the user hits the x, let&apos;s cancel.
               		Msgbox(&quot;Installation wizard cancelled.&quot;, 48, &quot;Cancelled&quot;)
               		Exit Function
               End If

              Packages=1
              &apos;Run the dependency check
              Packages=PackagesCheck
              
              If Packages = 0 then				
					OverrideDeps=msgbox(&quot;Not all dependencies were satisfied.  This may cause problems.&quot; &amp; chr(10) &amp; &quot;Would you like to continue anyway?&quot;,292,&quot;Dependency Failure&quot;)
					If OverrideDeps=6 Then
              		&apos; Set failure status so that initiating process can also escape						
						FirstRunCheck = 1
					else FirstRunCheck = 0
					End If
			End If
			&apos; If we are OK to go on then try and install the scripts.  If we can&apos;t go on there&apos;s no point in trying as it might crash soffice
			If FirstRunCheck = 1 Then
	             InstallScripts
	             If NOT FileExists(WorkingDir &amp; &quot;/commit.sh&quot;) then
	             	FirstRunCheck = 0
	             else
               		MsgBox(&quot;Configuration complete.  OOoSVN will now continue with the function you requested.&quot;, 64, &quot;Complete&quot;)
               		FirstRunCheck = 1 
               	 End If
            End If
end if
End Function

Function PackagesCheck
&apos; Installation test to see if we&apos;ve got dependencies installed
&apos; Check for: bash in path
Dim lSVN as Single
Dim lBash as Single
Dim lCoreutils as Single
Dim lFindutils as Single
Dim lzip as Single
Dim lUnzip as Single
Dim lGrep as Single
Dim lAwk as Single
Dim lSed as Single
Dim oDoc

dim path as string
dim aPaths
dim BashPath as string
dim oDlgPackageCheck as Object

&apos; start status bar
	oDoc = ThisComponent
	oDocCtrl = oDoc.getCurrentController()
	oDocFrame = oDocCtrl.getFrame()

	oStatus = oDocFrame.createStatusIndicator()   
	oStatus.start( &quot;Checking OOoSVN dependencies....&quot;, 10 )


	packagescheck=1
    WorkingDir = getWorkingDir
    WorkingDir2 = getWorkingDir2
	cQuote = Chr( 34 )
	bash=0
	BashPath=&quot;&quot;
	
&apos; Find the OS
OS=getguitype()
If OS=1 then
	OS = &quot;Microsoft Windows&quot;
	bashname=&quot;bash.exe&quot;
	pathdelimiter=&quot;;&quot;
else
	OS = &quot;Unix like system&quot;
	bashname=&quot;bash&quot;
	pathdelimiter=&quot;:&quot;
End If

&apos; Load the system &apos;PATH&apos; environment variable
path=Environ(&quot;PATH&quot;)

&apos; Split the string into an array or paths about the colon delimeters
aPaths =Split(path,pathdelimiter)

&apos; For each element of the path array look to see if the bash file exists in it
For i = Lbound(aPaths) to Ubound(aPaths)
	If FileExists(aPaths(i)&amp;&quot;/&quot;&amp;bashname) then
		bash=1
		BashPath=aPaths(i)
	End If
Next

oStatus.value=1

&apos; Test if bash was found
If bash=1 then
&apos; If Bash wasn&apos;t found we can skip straight to the dialogue.  If not, all of the version tests get run.

&apos;Test if the working directory exists and if not create it:

	If NOT FileExists(WorkingDir) then
		mkdir WorkingDir
	End If

	&apos;bash - now we know it exists we can call it without dividing by zero
	command = &quot;bash --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	msgbox( &quot;bash -c &quot; + cQuote + command + cQuote)
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
&apos;	Shell(command &amp; &quot; &gt; &quot; &amp; WorkingDir &amp; &quot;/test.txt&quot;)

&apos;	Shell( &quot;bash -c &quot; + cQuote + &quot;bash --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;bash --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sBash = sBash &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sBash)&lt;&gt;0 then
	aBash=Split(sBash,&quot; &quot;)
	sBash=aBash(3)
	lBash=left(sBash,3)
	if lBash &lt; 3 then
		packages=false
	end if
	else
		sBash=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=2
	
	&apos;Subversion
	command = &quot;svn --version -q&gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;svn --version -q &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sSVN = sSVN &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sSVN)&lt;&gt;0 then
	lSVN=left(sSVN,3)
	if lSVN &lt; 1.3 then
		packagescheck=0
	end if
	else
		sSVN=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=2
	
	&apos; Coreutils, via &apos;ls&apos;
	command = &quot;ls --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;ls --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sCoreutils = sCoreutils &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sCoreUtils)&lt;&gt;0 then
	sCoreutils=join(split(sCoreutils, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aCoreutils=Split(sCoreutils,&quot; &quot;)
	sCoreutils=aCoreutils(3)
	lCoreutils=left(sCoreutils,4)
	if lCoreutils &lt; 5 then
		packagescheck=0
	end if
	else
		sCoreutils=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=3
	
	&apos; Findutils
	command = &quot;find --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;find --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sFindutils = sFindutils &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sFindUtils)&lt;&gt;0 then
	sFindUtils=join(split(sFindutils, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aFindUtils=Split(sFindutils,&quot; &quot;)
	sFindutils=aFindutils(3)
	lFindutils=left(sFindutils,3)
	if lFindutils &lt; 4 then
		packagescheck=0
	end if
	else
		sFindUtils=&quot;not found&quot;
		packagescheck=0
	end if

	oStatus.value=4

	&apos; Zip
	command = &quot;zip --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;zip --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sZip = sZip &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sZip)&lt;&gt;0 then
	sZip=join(split(sZip, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aZip=Split(sZip,&quot; &quot;)
	sZip=aZip(14)
	lZip=left(sZip,3)
	if lZip &lt; 2 then
		packagescheck=0
	end if
	else
		sZip=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=5

	&apos; Unzip
	command = &quot;unzip -v &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;unzip -v &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sUnzip = sUnzip &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sUnzip)&lt;&gt;0 then
	aUnzip=Split(sUnzip,&quot; &quot;)
	sUnzip=aUnzip(1)
	lUnzip=left(sUnzip,3)
	if lUnzip &lt; 5 then
		packagescheck=0
	end if
	else
		sUnzip=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=6
	
	&apos; grep
	command = &quot;grep --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;grep --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sGrep = sGrep &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sGrep)&lt;&gt;0 then
	sGrep=join(split(sGrep, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aGrep=Split(sGrep,&quot; &quot;)
	sGrep=aGrep(3)
	lGrep=left(sGrep,3)
	if lGrep &lt; 2 then
		packagescheck=0
	end if
	else
		sGrep=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=7
	
	&apos; awk
	command = &quot;awk --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;awk --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sAwk = sAwk &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sAwk)&lt;&gt;0 then
	sAwk=join(split(sAwk, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aAwk=Split(sAwk,&quot; &quot;)
	sAwk=aAwk(2)
	lAwk=left(sAwk,3)
	if lAwk &lt; 3 then
		packagescheck=0
	end if
	else
		sAwk=&quot;not found&quot;
		packagescheck=0
	end if
	
	oStatus.value=8
	
	&apos; sed
	command = &quot;sed --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;sed --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sSed = sSed &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sSed)&lt;&gt;0 then
	sSed=join(split(sSed, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aSed=Split(sSed,&quot; &quot;)
	sSed=aSed(3)
	lSed=left(sSed,3)
	if lSed &lt; 3 then
		packagescheck=0
	end if
	else
		sSed=&quot;not found&quot;
		packagescheck=0
	end if

	oStatus.value=9
	
else
&apos;In case bash was not found
packagescheck=0

&apos; version numbers in case of skipping
	sBash=&quot;not found&quot;
	sSVN=&quot;skipped&quot;
	sCoreUtils=&quot;skipped&quot;
	sFindUtils=&quot;skipped&quot;
	sZip=&quot;skipped&quot;
	sUnzip=&quot;skipped&quot;
	sGrep=&quot;skipped&quot;
	sAwk=&quot;skipped&quot;
	sSed=&quot;skipped&quot;
end if

oStatus.end()


if packagescheck=0	then
		
	If OS=&quot;Microsoft Windows&quot; then
		Fail=&quot;OOoSVN is not currently supported on Windows and will not function properly.&quot; &amp; _  
			&quot;  If you would like to help implement OOoSVN support on Windows then please contact ed.holness@gmail.com.&quot;
	else
		Fail=&quot;Some package checks seem to have failed.  These tests are not 100% reliable so please check manually.&quot;
	End If
	
	
&apos;Set up the dialogue
oDlgPackageCheck = _
		CreateUnoDialog(DialogLibraries.ooosvn.DlgPackageCheck)

&apos; Get access to labels in the dialogue
With oDlgPackageCheck
	OSType = .getcontrol(&quot;labelOSType&quot;)
	BashNumber = .getcontrol(&quot;labelBashNumber&quot;)
	SubversionNumber = .getControl(&quot;labelSubversionNumber&quot;)
	CoreutilsNumber = .getControl(&quot;labelCoreutilsNumber&quot;)
	FindutilsNumber = .getControl(&quot;labelFindutilsNumber&quot;)
	ZipNumber = .getControl(&quot;labelZipNumber&quot;)
	UnzipNumber = .getControl(&quot;labelUnzipNumber&quot;)
	GrepNumber = .getControl(&quot;labelGrepNumber&quot;)
	AwkNumber = .getControl(&quot;labelAwkNumber&quot;)
	SedNumber = .getControl(&quot;labelSedNumber&quot;)
	FailMessage = .getControl(&quot;FailMessage&quot;)
	
End With
	
	&apos; Set values of labels in the dialogue to display statistics
	OSType.Text =OS
	BashNumber.Text =sBash
	SubversionNumber.Text = sSVN
	CoreutilsNumber.Text = sCoreutils
	FindutilsNumber.Text = sFindutils
	ZipNumber.Text = sZip
	UnzipNumber.Text = sUnzip
	GrepNumber.Text = sGrep
	AwkNumber.Text = sAwk
	SedNumber.Text = sSed
	FailMessage.Text = Fail
			
	&apos;Load the dialogue to show the results
	oDlgPackageCheck.execute
	
	end if

End Function

Function HelpDoPackagesCheck
&apos; Runs the packagecheck and returns a simple OK message, used in the help screen
packages=packagescheck

If packages=1 then
	msgbox(&quot;All dependency checks passed.&quot;,64)
End If
End Function

Function GetExtensionURL

  oPIP = GetDefaultContext().getByName( _ 
    &quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;) 
  GetExtensionDir=oPIP.getPackageLocation(&quot;vnd.basicaddonbuilder.ooosvn&quot;) 

msgbox getextensiondir

End Function
</script:module>