<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="installation" script:language="StarBasic">Function CreateWorkingDir
&apos;Creates ~/.ooosvn/ and home repository

   WorkingDir = getWorkingDir

&apos; Create the home repository
   ret = Shell(&quot;svnadmin create --fs-type fsfs&quot; , 6, WorkingDir &amp; &quot; &gt; &quot; &amp; WorkingDir &amp; &quot;/operation.log&quot;,true)
If ret &lt;&gt; 0 then 
		CreateSVN = false
		&apos;Error Log window
		&apos;OperationLog(&quot;Failed to create repository&quot;)
		
		MsgBox(&quot;Failed to create repository.&quot;,48,&quot;Error&quot;)
		end if

   If NOT FileExists(WorkingDir) Then
   
   	&apos;Error Log window
			iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/operation.log&quot;
Open aFile For Input As iNumber
While not eof(iNumber)
Line Input #iNumber, sLine
If sLine &lt;&gt;&quot;&quot; then
sMsg = sMsg &amp; sLine &amp; chr(13)
end if
wend
Close #iNumber

	txtLog.Text = sMsg
	oDlgLog.Title = &quot;Failed to create working directory&quot;
		oStatus.end()
	oDlgLog.execute
   
     &apos;MsgBox(&quot;Creation of working directory &quot; &amp; WorkingDir &amp; &quot; failed.  Do you have adequate write permissions?&quot;, 16, &quot;Failed&quot;)
     WorkingDirCreate = 0
     Exit Function
   End If

   Installscripts

&apos;end if

end Function

Function InstallScripts
&apos; Installs/upgrades scripts.  It is strongly recommended that after any upgrade, this macro is run.
  WorkingDir = getWorkingDir

          If NOT FileExists(WorkingDir) then
               CreateWorkingDir
            exit function
          end if
          
  &apos;now open the file..
oFileAccessService = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
oTextOutputStream = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)

&apos;###################################################
&apos;install commit.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/commit.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/commit.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/commit.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to commit changes to an updated document into SVN.&quot; &amp; chr(10) &amp; _
&quot;#Usage: commit.sh [document path] [document filename] [full repository URL] [working directory path] [commit comment]&quot; &amp; chr(10) &amp; _
&quot;echo Document Path: $1 &quot; &amp; chr(10) &amp; _
&quot;echo Document UUID: $2 &quot; &amp; chr(10) &amp; _
&quot;echo Repository URL: $3 &quot; &amp; chr(10) &amp; _
&quot;echo Working directory path: $4 &quot; &amp; chr(10) &amp; _
&quot;echo Commit comment: $5 &quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;if test -f &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; 		# test that file exists&quot; &amp; chr(10) &amp; _
&quot;	then echo &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; found		# confirmation of file existence&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;	echo &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; not found.	# warn that file doesn&apos;t exist&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;rm -f $4/$2/trunk/Pictures/*&quot; &amp; chr(10) &amp; _
&quot;unzip -o &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; -d $4/$2/trunk/ -x *.svn*&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;cd $4/$2/trunk/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;svn status | grep ^\! | cut -c8- | xargs svn rm&quot; &amp; chr(10) &amp; _
&quot;svn status | grep ^\? | cut -c8- | xargs svn add&quot; &amp; chr(10) &amp; _
&quot;svn commit -m &quot; &amp; chr(34) &amp; &quot;$5&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;cd $4/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;svn checkout $3/$2/&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()
&apos;###################################################
&apos; Install import.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/import.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/import.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/import.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to carry out initial import of document in SVN.&quot; &amp; chr(10) &amp; _
&quot;#Usage: import.sh [document path] [document filename] [full repository URL] [working directory path] [Document UUID to assign] [Optional Document UUID of parent document to make child document]&quot; &amp; chr(10) &amp; _
&quot;echo Importing $1&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Document filename: $2 &quot; &amp; chr(10) &amp; _
&quot;echo Repository URL: $3 &quot; &amp; chr(10) &amp; _
&quot;echo Working directory path: $4 &quot; &amp; chr(10) &amp; _
&quot;echo Document UUID: $5 &quot; &amp; chr(10) &amp; _
&quot;echo Parent Document UUID: $6&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;mkdir -v $4/$5/&quot; &amp; chr(10) &amp; _
&quot;mkdir -v $4/$5/temp/&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if test -f &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; 		# test that file exists&quot; &amp; chr(10) &amp; _
&quot;	then echo &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; found		# confirmation of file existence&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;	# Error that file doesn&apos;t exist and exit&quot; &amp; chr(10) &amp; _
&quot;	echo Fatal error!&quot; &amp; chr(10) &amp; _
&quot;	echo &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; not found&quot; &amp; chr(10) &amp; _
&quot;	echo &quot; &amp; chr(34) &amp; &quot;Maybe the filename includes a forbidden character: &amp; ; ( )&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;	echo Import aborted.&quot; &amp; chr(10) &amp; _
&quot;	echo ================================================&quot; &amp; chr(10) &amp; _
&quot;	exit&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;unzip -o &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; -d $4/$5/temp/ -x *.svn* # Spaces in filename fixed&quot; &amp; chr(10) &amp; _
&quot;cd $4/$5/temp/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;# Get and write repo UUID&quot; &amp; chr(10) &amp; _
&quot;repo_uuid=`svnlook uuid $4`&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if grep -q &quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;Repository-UUID\&quot; &amp; chr(34) &amp; &quot; meta:value-type=\&quot; &amp; chr(34) &amp; &quot;string\&quot; &amp; chr(34) &amp; &quot;&gt;&quot; &amp; chr(34) &amp; &quot; meta.xml&quot; &amp; chr(10) &amp; _
&quot;# in case of 0.3 repo format&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;echo Updating repository UUID version 0.3 to 0.4&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot; meta:value-type=\&quot; &amp; chr(34) &amp; &quot;string\&quot; &amp; chr(34) &amp; &quot;&gt;.\{36\}&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$repo_uuid&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;elif grep -q &quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot;&gt;&quot; &amp; chr(34) &amp; &quot; meta.xml&quot; &amp; chr(10) &amp; _
&quot;# in case of 0.4 repo format&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;echo Updating Repository UUID: $repo_uuid&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot;&gt;.\{36\}&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$repo_uuid&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;echo Inserting Repository UUID: $repo_uuid&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$repo_uuid&lt;\/meta:user-defined&gt;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if grep -q &quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;&quot; &amp; chr(34) &amp; &quot; meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;echo Updating Document UUID: $5&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;.\{36\}&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$5&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;echo Inserting Document UUID: $5&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$5&lt;\/meta:user-defined&gt;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;###ParentUUID processing&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if grep -q &quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;ParentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;&quot; &amp; chr(34) &amp; &quot; meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;echo Updating Parent UUID: $6&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;ParentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;.\{36\}&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;ParentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$6&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;echo Inserting Parent UUID: $6&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;ParentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;$6&lt;\/meta:user-defined&gt;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;###Document name processing&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if grep -q &quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocName\&quot; &amp; chr(34) &amp; &quot;&gt;&quot; &amp; chr(34) &amp; &quot; meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;echo Updating Document Name: $2&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocName\&quot; &amp; chr(34) &amp; &quot;&gt;\([^&lt;][^&lt;]*\)&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocName\&quot; &amp; chr(34) &amp; &quot;&gt;$2&lt;\/meta:user-defined&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;echo Inserting Document Name: $2&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;txtnew=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocName\&quot; &amp; chr(34) &amp; &quot;&gt;$2&lt;\/meta:user-defined&gt;&lt;\/office:meta&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;/&quot; &amp; chr(34) &amp; &quot;$txtnew&quot; &amp; chr(34) &amp; &quot;/ meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;# delete junk tags&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;RepositoryUUID\&quot; &amp; chr(34) &amp; &quot;\/&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;// meta.xml&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;\/&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;// meta.xml&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;ParentUUID\&quot; &amp; chr(34) &amp; &quot;\/&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;// meta.xml&quot; &amp; chr(10) &amp; _
&quot;txtold=&quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocName\&quot; &amp; chr(34) &amp; &quot;\/&gt;&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;sed -i s/&quot; &amp; chr(34) &amp; &quot;$txtold&quot; &amp; chr(34) &amp; &quot;// meta.xml&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;echo updated metadata&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;# Import&quot; &amp; chr(10) &amp; _
&quot;svn import . $3/$5/trunk/ -m &apos;Initial Import&apos;&quot; &amp; chr(10) &amp; _
&quot;rm -rf $4/$5/temp/&quot; &amp; chr(10) &amp; _
&quot;cd $4/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;svn checkout $3/$5/&quot; &amp; chr(10) &amp; _
&quot;cd $4/$5/trunk/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;pwd=`pwd`&quot; &amp; chr(10) &amp; _
&quot;if [ $pwd != &quot; &amp; chr(34) &amp; &quot;${4}/${5}/trunk&quot; &amp; chr(34) &amp; &quot; ]&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;echo &quot;&amp; chr(34) &amp; &quot;Error: Working copy is not where it should be!&quot;&amp; chr(34) &amp; chr(10) &amp; _
&quot;echo &quot;&amp; chr(34) &amp; &quot;Most likely cause is disallowed characters in document filename.  Exiting.&quot;&amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;exit&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Recompressing archive:&quot; &amp; chr(10) &amp; _
&quot;zip -rDX &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; * -x *.svn*&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################
&apos;listdocuments.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/listdocuments.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/listdocuments.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/listdocuments.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to list all documents within a working dir&quot; &amp; chr(10) &amp; _
&quot;#Usage: listdocuments.sh [working directory path]&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Listing Documents in $1&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;mkdir $1/documentlist/&quot; &amp; chr(10) &amp; _
&quot;count = 0&quot; &amp; chr(10) &amp; _
&quot;for document in `find $1 -maxdepth 2 -mindepth 2 -iname trunk | cut -d&apos;/&apos; -f5`&quot; &amp; chr(10) &amp; _
&quot;do&quot; &amp; chr(10) &amp; _
&quot;svn &gt;&gt; $1/documentlist/$document&quot; &amp; chr(10) &amp; _
&quot;count=$((count+1))&quot; &amp; chr(10) &amp; _
&quot;done&quot; &amp; chr(10) &amp; _
&quot;echo $count found&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################
&apos;install listversions.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/listversions.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/listversions.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/listversions.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to list all revisions of a document in SVN&quot; &amp; chr(10) &amp; _
&quot;#Usage: listversions.sh [document UUID] [repository URL] [Working directory path]&quot; &amp; chr(10) &amp; _
&quot;echo Listing Versions&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Document UUID: $1 &quot; &amp; chr(10) &amp; _
&quot;echo Repository URL: $2 &quot; &amp; chr(10) &amp; _
&quot;echo Working directory path: $3&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;mkdir $3/$1/versions/&quot; &amp; chr(10) &amp; _
&quot;echo Versions found: &quot; &amp; chr(10) &amp; _
&quot;for version in `svn log -q $2/$1 | grep r | cut -c2- | cut -d&apos; &apos; -f1`&quot; &amp; chr(10) &amp; _
&quot;do&quot; &amp; chr(10) &amp; _
&quot;svn &gt;&gt; $3/$1/versions/$version.version&quot; &amp; chr(10) &amp; _
&quot;echo $version&quot; &amp; chr(10) &amp; _
&quot;done&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################
&apos;revert.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/revert.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/revert.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/revert.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to revert document to another version&quot; &amp; chr(10) &amp; _
&quot;#Usage: revert.sh [output path] [document UUID] [repository URL] [Working directory path] [version number in SVN]&quot; &amp; chr(10) &amp; _
&quot;echo Reverting document&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Document path: $1&quot; &amp; chr(10) &amp; _
&quot;echo Document UUID: $2&quot; &amp; chr(10) &amp; _
&quot;echo Repository URL: $3 &quot; &amp; chr(10) &amp; _
&quot;echo Working directory path: $4&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Version number to rebuild: $5&quot; &amp; chr(10) &amp; _
&quot;rm &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;cd $4/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;rm -rf $4/$2/trunk&quot; &amp; chr(10) &amp; _
&quot;svn checkout -r$5 $3/$2/&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;cd $4/$2/trunk/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;zip -rDX &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; * -x *.svn*&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################
&apos;thumbnails.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/thumbnails.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/thumbnails.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/thumbnails.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to generate version thumbnails for a document&quot; &amp; chr(10) &amp; _
&quot;#Usage: thumbnails.sh [document file name] [repository URL] [Working directory path]&quot; &amp; chr(10) &amp; _
&quot;echo Generating thumbnails&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Document UUID: $1 &quot; &amp; chr(10) &amp; _
&quot;echo Repository URL: $2 &quot; &amp; chr(10) &amp; _
&quot;echo Working directory path: $3&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Versions found: &quot; &amp; chr(10) &amp; _
&quot;for version in `svn log -q $2/$1 | grep r | cut -c2- | cut -d&apos; &apos; -f1`&quot; &amp; chr(10) &amp; _
&quot;do&quot; &amp; chr(10) &amp; _
&quot;svn checkout -q -r$version $2/$1/trunk/Thumbnails/ $3/$1/preview/.$version/&quot; &amp; chr(10) &amp; _
&quot;mv $3/$1/preview/.$version/thumbnail.png $3/$1/preview/$version.png &gt;&gt; $3/$1/preview/log.txt&quot; &amp; chr(10) &amp; _
&quot;rm -rf $3/$1/preview/$version/&quot; &amp; chr(10) &amp; _
&quot;echo $version&quot; &amp; chr(10) &amp; _
&quot;done&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################
&apos;userguide.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/userguide.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/userguide.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/userguide.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script toload user guide from development SVN repository&quot; &amp; chr(10) &amp; _
&quot;#Usage: userguide.sh [Working directory path] [repostitory URL that the userguide resides in]&quot; &amp; chr(10) &amp; _
&quot;cd $1/&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;rm -rf $1/userguide&quot; &amp; chr(10) &amp; _
&quot;svn checkout $2&quot; &amp; chr(10) &amp; _
&quot;cd $1/userguide&quot; &amp; chr(10) &amp; _
&quot;echo Changed directory to:&quot; &amp; chr(10) &amp; _
&quot;pwd&quot; &amp; chr(10) &amp; _
&quot;zip -rDX ../userguide.odt * -x *.svn*&quot;)

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################
&apos;bulklist.sh
&apos;###################################################
If FileExists(WorkingDir &amp; &quot;/bulklist.sh&quot;) then
oFileAccessService.kill(WorkingDir &amp; &quot;/bulklist.sh&quot;)
end if
outStream = oFileAccessService.OpenFileWrite(WorkingDir &amp; &quot;/bulklist.sh&quot;)
oTextOutputStream.setOutputStream(outStream)

 oTextOutputStream.writeString(&quot;#!/bin/bash&quot; &amp; chr(10) &amp; _
&quot;#Script to carry out listing of all valid OpenDocument files in a path which are not in OOoSVN.&quot; &amp; chr(10) &amp; _
&quot;#Usage: bulklist.sh [path] [OOoSVN working directory] [Filetypes] [Excludes]&quot; &amp; chr(10) &amp; _
&quot;# Filetypes: any number of t, s, p, g, b or f, each matching an ODF type, eg. &apos;t&apos; for .odt.&quot; &amp; chr(10) &amp; _
&quot;# Excludes: any number of s or h, s to exclude subdirectories (non-recursive), h to exclude hidden files and directories&quot; &amp; chr(10) &amp; _
&quot;# Example: &apos;sh bulklist.sh tspgbf sh&apos; will search for *.odt, *.ods, *.odp, *.odg, *.odb and *.odf files, non-recursively, without hidden files or directories&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;# list all writable files with correct extensions recursively, minus .ooosvn/&quot; &amp; chr(10) &amp; _
&quot;cd &quot; &amp; chr(34) &amp; &quot;$2&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Generating OpenDocument file list for:&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo File types:&quot; &amp; chr(10) &amp; _
&quot;# Extract the file types specified and put together the find parameters&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;filetypes=&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;odt=&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$3&quot; &amp; chr(34) &amp; &quot; == *t* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo .odt - OpenDocument Text&quot; &amp; chr(10) &amp; _
&quot;  filetypes=${filetypes}&quot; &amp; chr(34) &amp; &quot;-iname \&quot; &amp; chr(34) &amp; &quot;*.odt\&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$3&quot; &amp; chr(34) &amp; &quot; == *s* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo .ods - OpenDocument Spreadsheet&quot; &amp; chr(10) &amp; _
&quot;  filetypes=${filetypes}&quot; &amp; chr(34) &amp; &quot; -o -iname \&quot; &amp; chr(34) &amp; &quot;*.ods\&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$3&quot; &amp; chr(34) &amp; &quot; == *p* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo .odp - OpenDocument Presentation&quot; &amp; chr(10) &amp; _
&quot;  filetypes=${filetypes}&quot; &amp; chr(34) &amp; &quot; -o -iname \&quot; &amp; chr(34) &amp; &quot;*.odp\&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$3&quot; &amp; chr(34) &amp; &quot; == *g* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo .odg - OpenDocument Graphics&quot; &amp; chr(10) &amp; _
&quot;  filetypes=${filetypes}&quot; &amp; chr(34) &amp; &quot; -o -iname \&quot; &amp; chr(34) &amp; &quot;*.odg\&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$3&quot; &amp; chr(34) &amp; &quot; == *b* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo .odb - OpenDocument Database&quot; &amp; chr(10) &amp; _
&quot;  filetypes=${filetypes}&quot; &amp; chr(34) &amp; &quot; -o -iname \&quot; &amp; chr(34) &amp; &quot;*.odb\&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$3&quot; &amp; chr(34) &amp; &quot; == *f* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo .odf - OpenDocument Formula&quot; &amp; chr(10) &amp; _
&quot;  filetypes=${filetypes}&quot; &amp; chr(34) &amp; &quot; -o -iname \&quot; &amp; chr(34) &amp; &quot;*.odf\&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;# Tidy up the filetypes string&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$filetypes&quot; &amp; chr(34) &amp; &quot; == &quot; &amp; chr(34) &amp; &quot; -o &quot; &amp; chr(34) &amp; &quot;* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  filetypes2=${filetypes:4}&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;  filetypes2=$filetypes&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo Exclusions:&quot; &amp; chr(10) &amp; _
&quot;# Extract recursive and hidden options from the command line parameters&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;recursive=&quot; &amp; chr(34) &amp; chr(34) &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$4&quot; &amp; chr(34) &amp; &quot; == *s* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo Subdirectories - Search will be non-recursive&quot; &amp; chr(10) &amp; _
&quot;  recursive=&quot; &amp; chr(34) &amp; &quot;-maxdepth 1&quot; &amp; chr(34)  &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;hidden=&quot; &amp; chr(34) &amp; chr(34)  &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [[ &quot; &amp; chr(34) &amp; &quot;$4&quot; &amp; chr(34) &amp; &quot; == *h* ]]&quot; &amp; chr(10) &amp; _
&quot;  then&quot; &amp; chr(10) &amp; _
&quot;  echo Hidden files and directories&quot; &amp; chr(10) &amp; _
&quot;  hidden=&quot; &amp; chr(34) &amp; &quot; ! -iname \&quot; &amp; chr(34) &amp; &quot;.*\&quot; &amp; chr(34) &amp; &quot; \) \( ! -path \&quot; &amp; chr(34) &amp; &quot;*/.*\&quot; &amp; chr(34) &amp; &quot; \)&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;  else&quot; &amp; chr(10) &amp; _
&quot;  hidden=&quot; &amp; chr(34) &amp; &quot;\) \( ! -path \&quot; &amp; chr(34) &amp; &quot;*.ooosvn*\&quot; &amp; chr(34) &amp; &quot; \)&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;#remove leftover files&quot; &amp; chr(10) &amp; _
&quot;rm bulklist.txt &amp;&gt; /dev/null&quot; &amp; chr(10) &amp; _
&quot;rm bulklist2.txt &amp;&gt; /dev/null&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Listing any invalid files, check to see if they are corrupt:&quot; &amp; chr(34)  &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;# Echo the parameters to find.  Messy but the best way to get all characters mangled correctly!&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;$1&quot; &amp; chr(34) &amp; &quot; &quot; &amp; chr(34) &amp; &quot;$recursive&quot; &amp; chr(34) &amp; &quot; -perm -u=w -xtype f &apos;\(&apos;  &quot; &amp; chr(34) &amp; &quot;$filetypes2&quot; &amp; chr(34) &amp; &quot; &quot; &amp; chr(34) &amp; &quot;$hidden&quot; &amp; chr(34) &amp; &quot; | xargs find &gt; bulklist.txt&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;#set variables&quot; &amp; chr(10) &amp; _
&quot;a=0&quot; &amp; chr(10) &amp; _
&quot;already=0&quot; &amp; chr(10) &amp; _
&quot;broken=0&quot; &amp; chr(10) &amp; _
&quot;import=0&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;while read line&quot; &amp; chr(10) &amp; _
&quot;do a=$(($a+1));&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;### Reading DocumentUUID and seeing if this file is already under control&quot; &amp; chr(10) &amp; _
&quot;testmeta=`unzip -p &quot; &amp; chr(34) &amp; &quot;$line&quot; &amp; chr(34) &amp; &quot; meta.xml | grep &quot; &amp; chr(34) &amp; &quot;&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;&quot; &amp; chr(34) &amp; &quot; | wc -l`&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if [ $testmeta = &quot; &amp; chr(34) &amp; &quot;1&quot; &amp; chr(34) &amp; &quot; ]&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;docuUUID=`unzip -p &quot; &amp; chr(34) &amp; &quot;$line&quot; &amp; chr(34) &amp; &quot; meta.xml | awk &apos;/&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;/,/&lt;\/meta:user-defined&gt;/&apos; | sed &apos;s/\(.*\)\(&lt;meta:user-defined meta:name=\&quot; &amp; chr(34) &amp; &quot;DocumentUUID\&quot; &amp; chr(34) &amp; &quot;&gt;\)\(.*\)\(&lt;\/meta:user-defined&gt;\)\(.*\)/\3/&apos; | head -c36`&quot; &amp; chr(10) &amp; _
&quot;#echo $line already has a DocuUUID: $docuUUID&quot; &amp; chr(10) &amp; _
&quot;if [ -d ~/.ooosvn/$docuUUID/.svn/ ]&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;# the document UUID is already in the working directory so skip it&quot; &amp; chr(10) &amp; _
&quot;already=$(($already+1))&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;# there is a document UUID but it isn&apos;t in the working directory so list it&quot; &amp; chr(10) &amp; _
&quot;echo $line &gt;&gt; bulklist2.txt&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;# file does not have a DocuUUID so check if it has a meta.xml&quot; &amp; chr(10) &amp; _
&quot;unzip -t &quot; &amp; chr(34) &amp; &quot;$line&quot; &amp; chr(34) &amp; &quot; meta.xml &amp;&gt; ziptemp.txt&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if grep -q &quot; &amp; chr(34) &amp; &quot;cannot find zipfile directory in one of&quot; &amp; chr(34) &amp; &quot; ziptemp.txt&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;# not a valid zip file so we will skip this one&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;$line does not appear to be a valid Zip file.  Skipping.&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;broken=$(($broken+1))&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;if grep -q &quot; &amp; chr(34) &amp; &quot;caution: filename not matched:  meta.xml&quot; &amp; chr(34) &amp; &quot; ziptemp.txt&quot; &amp; chr(10) &amp; _
&quot;then&quot; &amp; chr(10) &amp; _
&quot;# no meta.xml file so we will skip this one&quot; &amp; chr(10) &amp; _
&quot;echo $line does not contain meta.xml.  Skipping.&quot; &amp; chr(10) &amp; _
&quot;broken=$(($broken+1))&quot; &amp; chr(10) &amp; _
&quot;else&quot; &amp; chr(10) &amp; _
&quot;# there is a meta.xml so valid file for us to list&quot; &amp; chr(10) &amp; _
&quot;echo $line &gt;&gt; bulklist2.txt&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;fi&quot; &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;done &lt; &quot; &amp; chr(34) &amp; &quot;bulklist.txt&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;&quot; &amp; chr(10) &amp; _
&quot;echo ================================================&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Total possible OpenDocument matches: $a&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Invalid files: $broken&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Already in OOoSVN: $already&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;import=$((a-already-broken))&quot; &amp; chr(10) &amp; _
&quot;echo &quot; &amp; chr(34) &amp; &quot;Number of files to be imported: $import&quot; &amp; chr(34) &amp; chr(10) &amp; _
&quot;echo ================================================&quot;

&apos;close all streams
oTextOutputStream.closeOutput()

&apos;###################################################

&apos; test to make sure script creation worked
If Not FileExists(WorkingDir &amp; &quot;/commit.sh&quot;) then

MsgBox(&quot;Failed to create scripts in&quot; &amp; WorkingDir,48,&quot;Error&quot;)

End If

end Function

function CreateSVN() as integer
	CreateSVN = True
	
	&apos; If no working directory, it needs to be created for a repository to exist.
	WorkingDir = getWorkingDir	
	If NOT FileExists(WorkingDir) Then
       InstallScripts
     Exit Function
   End If
	
	&apos;&apos; need to make sure we have SVN, and get path to svn and svnadmin executables
	ret = Shell(&quot;svn --help&quot;, 6,&quot;&quot;,true)
	if ret &lt;&gt; 0 then
		CreateSVN = false
		MsgBox(&quot;Could not find svn. Please install Subversion first.&quot; &amp; chr$(13) &amp; &quot;See http://subversion.tigris.org&quot;,48,&quot;Error&quot;)
		exit function
	end if
		
 	sSVNURL = PickFolder(sGetHomeURL(), &quot;Select a directory for the new repository&quot;, &quot;&quot;)
	ret = Shell(&quot;svnadmin create --fs-type fsfs&quot;, 6, sSVNURL,true)
	if ret &lt;&gt; 0 then
		CreateSVN = false
		MsgBox(&quot;Failed to create repository.&quot;,48,&quot;Error&quot;)
		exit function
	end if
	
&apos;	ConnectToSVN(sSVNURL)

If NOT FileExists(sSVNURL &amp; &quot;/README.txt&quot;) then
msgbox (&quot;Repository creation failed.&quot; &amp; repo, 16, &quot;Error&quot;)
exit function
end if

uuid = shell(&quot;svn info &apos;&quot; &amp; converttourl(sSVNURL) &amp; &quot;&apos; | grep UUID | cut -c18-&quot;)
msgbox(sSVNURL)
msgbox(uuid)

end function

Function FirstRunCheck
&apos; Function to test if it is the first run or not.  If it is, the wizard runs.

	WorkingDir = getWorkingDir	
	
If NOT FileExists(WorkingDir &amp; &quot;/README.txt&quot;) then
               MsgBox(&quot;This appears to be the first time you have run OOoSVN.&quot; &amp; chr(10) &amp; chr(10) &amp; _
               &quot;There are several configuration steps we must do:&quot; &amp; chr(10) &amp; _
               &quot;1. Check you have the required packages, &quot; &amp; WorkingDir &amp; &quot;, which will be used for file operations.&quot; &amp; chr(10) &amp; _
               &quot;2. Create a working directory&quot; &amp; chr(10) &amp; _
               &quot;3. Configure a repository for documents to be checked into.&quot; &amp; chr(10) &amp; chr(10) &amp; _
               &quot;Press OK to begin.&quot;,64, &quot;First run wizard&quot;)
              PackagesCheck
 &apos;              If Packages = false then
  &apos;             exit function
              &apos; else
               InstallScripts
               MsgBox(&quot;Configuration complete.  OOoSVN will now continue with the function you requested.&quot;, 64, &quot;Complete&quot;)
          end if
End Function

Sub PackagesCheck
&apos; Installation test to see if we&apos;ve got dependencies installed
&apos; Check for: bash in path
Dim lSVN as Single
Dim lBash as Single
Dim lCoreutils as Single
Dim lFindutils as Single
Dim lzip as Single
Dim lUnzip as Single
Dim lGrep as Single
Dim lAwk as Single
Dim lSed as Single
Dim oDoc

dim path as string
dim aPaths
dim BashPath as string
dim oDlgPackageCheck as Object

&apos; start status bar
	oDoc = ThisComponent
	oDocCtrl = oDoc.getCurrentController()
	oDocFrame = oDocCtrl.getFrame()

	oStatus = oDocFrame.createStatusIndicator()   
	oStatus.start( &quot;Checking OOoSVN dependencies....&quot;, 10 )


	packages = true
    WorkingDir = getWorkingDir
    WorkingDir2 = getWorkingDir2
	cQuote = Chr( 34 )
	bash=0
	BashPath=&quot;&quot;
	
&apos; Find the OS
OS=getguitype()
If OS=1 then
	OS = &quot;Microsoft Windows&quot;
	bashname=&quot;bash.exe&quot;
	pathdelimiter=&quot;;&quot;
else
	OS = &quot;Unix like system&quot;
	bashname=&quot;bash&quot;
	pathdelimiter=&quot;:&quot;
End If

&apos; Load the system &apos;PATH&apos; environment variable
path=Environ(&quot;PATH&quot;) 

&apos;In case system is running Windows where paths are delimeted by semicolons
&apos;path=join(split(path, &quot;&quot;), &quot;&quot;)

&apos; Split the string into an array or paths about the colon delimeters
aPaths =Split(path,pathdelimiter)

&apos; For each element of the path array look to see if the bash file exists in it
For i = Lbound(aPaths) to Ubound(aPaths)
	If FileExists(aPaths(i)&amp;&quot;/&quot;&amp;bashname) then
		bash=1
		BashPath=aPaths(i)
	End If
Next

oStatus.value=1

&apos; Test if bash was found
If bash=1 then
&apos; If Bash wasn&apos;t found we can skip straight to the dialogue.  If not, all of the version tests get run.

&apos;Test if the working directory exists and if not create it:

	If NOT FileExists(WorkingDir) then
		mkdir WorkingDir
	End If

	&apos;bash - now we know it exists we can call it without dividing by zero
	command = &quot;bash --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	msgbox( &quot;bash -c &quot; + cQuote + command + cQuote)
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
&apos;	Shell(command &amp; &quot; &gt; &quot; &amp; WorkingDir &amp; &quot;/test.txt&quot;)

&apos;	Shell( &quot;bash -c &quot; + cQuote + &quot;bash --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;bash --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	if not fileexists(afile) then
	
	wait 1000
	
	end if
	
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sBash = sBash &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sBash)&lt;&gt;0 then
	aBash=Split(sBash,&quot; &quot;)
	sBash=aBash(3)
	lBash=left(sBash,3)
	if lBash &lt; 3 then
		packages=false
	end if
	else
		sBash=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=2
	
	&apos;Subversion
	command = &quot;svn --version -q&gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;svn --version -q &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sSVN = sSVN &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sSVN)&lt;&gt;0 then
	lSVN=left(sSVN,3)
	if lSVN &lt; 1.3 then
		packages=false
	end if
	else
		sSVN=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=2
	
	&apos; Coreutils, via &apos;ls&apos;
	command = &quot;ls --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;ls --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sCoreutils = sCoreutils &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sCoreUtils)&lt;&gt;0 then
	sCoreutils=join(split(sCoreutils, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aCoreutils=Split(sCoreutils,&quot; &quot;)
	sCoreutils=aCoreutils(3)
	lCoreutils=left(sCoreutils,4)
	if lCoreutils &lt; 5 then
		packages=false
	end if
	else
		sCoreutils=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=3
	
	&apos; Findutils
	command = &quot;find --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;find --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sFindutils = sFindutils &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sFindUtils)&lt;&gt;0 then
	sFindUtils=join(split(sFindutils, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aFindUtils=Split(sFindutils,&quot; &quot;)
	sFindutils=aFindutils(3)
	lFindutils=left(sFindutils,3)
	if lFindutils &lt; 4 then
		packages=false
	end if
	else
		sFindUtils=&quot;not found&quot;
		packages=false
	end if

	oStatus.value=4

	&apos; Zip
	command = &quot;zip --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;zip --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sZip = sZip &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sZip)&lt;&gt;0 then
	sZip=join(split(sZip, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aZip=Split(sZip,&quot; &quot;)
	sZip=aZip(14)
	lZip=left(sZip,3)
	if lZip &lt; 2 then
		packages=false
	end if
	else
		sZip=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=5

	&apos; Unzip
	command = &quot;unzip -v &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;unzip -v &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sUnzip = sUnzip &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sUnzip)&lt;&gt;0 then
	aUnzip=Split(sUnzip,&quot; &quot;)
	sUnzip=aUnzip(1)
	lUnzip=left(sUnzip,3)
	if lUnzip &lt; 5 then
		packages=false
	end if
	else
		sUnzip=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=6
	
	&apos; grep
	command = &quot;grep --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;grep --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sGrep = sGrep &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sGrep)&lt;&gt;0 then
	sGrep=join(split(sGrep, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aGrep=Split(sGrep,&quot; &quot;)
	sGrep=aGrep(3)
	lGrep=left(sGrep,3)
	if lGrep &lt; 2 then
		packages=false
	end if
	else
		sGrep=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=7
	
	&apos; awk
	command = &quot;awk --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;awk --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sAwk = sAwk &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sAwk)&lt;&gt;0 then
	sAwk=join(split(sAwk, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aAwk=Split(sAwk,&quot; &quot;)
	sAwk=aAwk(2)
	lAwk=left(sAwk,3)
	if lAwk &lt; 3 then
		packages=false
	end if
	else
		sAwk=&quot;not found&quot;
		packages=false
	end if
	
	oStatus.value=8
	
	&apos; sed
	command = &quot;sed --version &gt; &quot; &amp; cQuote &amp; WorkingDir2 &amp; &quot;/test.txt&quot; &amp; cQuote
&apos;	Shell( &quot;bash -c &quot; + cQuote + command + cQuote, &quot;&quot;,6,true)
	Shell( &quot;bash -c &quot; + cQuote + &quot;sed --version &gt; &quot; &amp; WorkingDir2 &amp; &quot;/test.txt&quot; + cQuote, &quot;&quot;,6,true)
		
	iNumber = Freefile
	aFile = WorkingDir &amp; &quot;/test.txt&quot;
	Open aFile For Input As iNumber
	While not eof(iNumber)
	Line Input #iNumber, sLine
	If sLine &lt;&gt;&quot;&quot; then
		sSed = sSed &amp; sLine &amp; chr(13)
	end if
	wend
	Close #iNumber
	&apos; Now mangle out the version
	if len(sSed)&lt;&gt;0 then
	sSed=join(split(sSed, chr(13)), &quot; &quot;) &apos;Replacing carriage returns with spaces
	aSed=Split(sSed,&quot; &quot;)
	sSed=aSed(3)
	lSed=left(sSed,3)
	if lSed &lt; 3 then
		packages=false
	end if
	else
		sSed=&quot;not found&quot;
		packages=false
	end if

	oStatus.value=9
	
else
&apos;In case bash was not found
packages=false

&apos; version numbers in case of skipping
	sSVN=&quot;skipped&quot;
	sBash=&quot;not found&quot;
end if

oStatus.end()


&apos;Set up the dialogue
oDlgPackageCheck = _
		CreateUnoDialog(DialogLibraries.ooosvn.DlgPackageCheck)

&apos; Get access to labels in the dialogue
With oDlgPackageCheck
	OSType = .getcontrol(&quot;labelOSType&quot;)
	BashNumber = .getcontrol(&quot;labelBashNumber&quot;)
	SubversionNumber = .getControl(&quot;labelSubversionNumber&quot;)
	CoreutilsNumber = .getControl(&quot;labelCoreutilsNumber&quot;)
	FindutilsNumber = .getControl(&quot;labelFindutilsNumber&quot;)
	ZipNumber = .getControl(&quot;labelZipNumber&quot;)
	UnzipNumber = .getControl(&quot;labelUnzipNumber&quot;)
	GrepNumber = .getControl(&quot;labelGrepNumber&quot;)
	AwkNumber = .getControl(&quot;labelAwkNumber&quot;)
	SedNumber = .getControl(&quot;labelSedNumber&quot;)
	
End With
	
	&apos; Set values of labels in the dialogue to display statistics
	OSType.Text =OS
	BashNumber.Text =sBash
	SubversionNumber.Text = sSVN
	CoreutilsNumber.Text = sCoreutils
	FindutilsNumber.Text = sFindutils
	ZipNumber.Text = sZip
	UnzipNumber.Text = sUnzip
	GrepNumber.Text = sGrep
	AwkNumber.Text = sAwk
	SedNumber.Text = sSed
			
	&apos;Load the dialogue to show the results
	oDlgPackageCheck.execute
	
	if packages=false	then
	msgbox(packages)
	end if

End Sub
</script:module>